simtime[i,3:12]<-sort(simtime[i,3:12])
}
#dpdf表示违约支付概率
dpdf<-function(u,rand){
#u表示违约时间的均匀分布,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]<u),]
return(dim(w1)[1]/runs)
}
p<-sapply(paydef,dpdf,rand=simtime,simplify = "array")
if(!is.numeric(p)) next
B<-(1-0.4)*p*exp(R*paydef)
EB<-mean(B)
#pay表示保费支付额,ppdf表示保费支付的概率
ppdf<-function(u,rand){
#u表示违约时间,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd])>u,]
return(dim(w1)[1]/runs)
}
#停时位于两个支付日之间的违约利息
apdf<-function(u,rand){
t<-floor(u/0.25)*0.25
t1<-t+0.25
#  w3<-rand[(rand[,1]>pexp(u,lambda[1]))&(rand[,2]>pexp(u,lambda[2]))&(rand[,3]>pexp(u,lambda[3]))&(rand[,4]>pexp(u,lambda[4]))
#            &(rand[,5]>pexp(u,lambda[5]))&(rand[,6]>pexp(u,lambda[6]))&(rand[,7]>pexp(u,lambda[7]))&(rand[,8]>pexp(u,lambda[8]))
#            &(rand[,9]>pexp(u,lambda[9]))&(rand[,10]>pexp(u,lambda[10]))&(rand[,11]>pexp(u,lambda[11]))&(rand[,12]>pexp(u,lambda[12]))
#           &((rand[,1]<=pexp(t1,lambda[1]))|(rand[,2]<=pexp(t1,lambda[2]))|(rand[,3]<=pexp(t1,lambda[3]))|(rand[,4]<=pexp(t1,lambda[4]))
#              |(rand[,5]<=pexp(t1,lambda[5]))|(rand[,6]<=pexp(t1,lambda[6]))|(rand[,7]<=pexp(t1,lambda[7]))|(rand[,8]<=pexp(t1,lambda[8]))
#              |(rand[,9]<=pexp(t1,lambda[9]))|(rand[,10]<=pexp(t1,lambda[10]))|(rand[,11]<=pexp(t1,lambda[11]))|(rand[,12]<=pexp(t1,lambda[12]))),]
w4<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]>u),]
w5<-w4[(w4[,1]<=u)|(w4[,2]<=u)|(w4[,nd]<=u),]
return(dim(w5)[1]/runs)
}
#支付额
pay<-function(time,rand){
t0<-floor(time/0.25)
t1<-rep(Time/0.25,length(time))
t<-pmin(t0,t1)
st<-pmin(time,Time)
prob<-sapply(st,ppdf,rand=rand,simplify = "array")
#未违约部分
f<-function(x) sum(exp(R*c(1:x)*0.25))*ppdf(x*0.25,rand)
undefpay<-sapply(t,f,simplify = "array")
#违约时超出时间利息
accrued<-function(t){
if(t<Time){
dt<-t%%0.25
accrue<-dt*exp(R*t)*apdf(t,rand)
}
else{
accrue<-0
}
return(accrue)
}
accruedpay<-sapply(st,accrued,simplify = "array")
accruedpay<-as.numeric(accruedpay)
EA<-mean(undefpay)+mean(accruedpay)
return(EA)
}
EA<-pay(paydef,simtime)
#CDS-spreads
s[z]<-EB/EA
}
spread<-mean(na.omit(s))
s_hac<-append(s_hac,spread)
#cat(Time,"years CDS:",spread,"\n")
}
plot(s_hac)
plot(s_hac*10000,"l")
for(nd in 3:12){
s<-rep(NA,n)
for(z in 1:n){
sim<-RVineSim(runs,Rcop1$RVM)
#sim<-rHAC(runs,H)
def<-sim
deftime<-matrix(data = NA,nrow = runs,ncol = dim(def)[2])#default time
for(i in 1:dim(def)[2]){
deftime[,i]<--log(1-def[,i])/lambda[i]
}
#sort reference entity default time & choose the stoptime
stoptime<-rep(Inf,dim(deftime)[1])
for(i in 1:dim(deftime)[2]){
deftime[i,3:12]<-sort(deftime[i,3:12])
stoptime[i]<-min(deftime[i,1:2],deftime[i,nd])
}
paydef<-stoptime[stoptime<Time]
#对违约时间排序
simtime<-matrix(data = NA,nrow = runs,ncol = dim(sim)[2])#simulation time
for(i in 1:dim(sim)[2]){
simtime[,i]<--log(1-sim[,i])/lambda[i]
}
for(i in 1:dim(simtime)[1]){
simtime[i,3:12]<-sort(simtime[i,3:12])
}
#dpdf表示违约支付概率
dpdf<-function(u,rand){
#u表示违约时间的均匀分布,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]<u),]
return(dim(w1)[1]/runs)
}
p<-sapply(paydef,dpdf,rand=simtime,simplify = "array")
if(!is.numeric(p)) next
B<-(1-0.4)*p*exp(R*paydef)
EB<-mean(B)
#pay表示保费支付额,ppdf表示保费支付的概率
ppdf<-function(u,rand){
#u表示违约时间,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd])>u,]
return(dim(w1)[1]/runs)
}
#停时位于两个支付日之间的违约利息
apdf<-function(u,rand){
t<-floor(u/0.25)*0.25
t1<-t+0.25
#  w3<-rand[(rand[,1]>pexp(u,lambda[1]))&(rand[,2]>pexp(u,lambda[2]))&(rand[,3]>pexp(u,lambda[3]))&(rand[,4]>pexp(u,lambda[4]))
#            &(rand[,5]>pexp(u,lambda[5]))&(rand[,6]>pexp(u,lambda[6]))&(rand[,7]>pexp(u,lambda[7]))&(rand[,8]>pexp(u,lambda[8]))
#            &(rand[,9]>pexp(u,lambda[9]))&(rand[,10]>pexp(u,lambda[10]))&(rand[,11]>pexp(u,lambda[11]))&(rand[,12]>pexp(u,lambda[12]))
#           &((rand[,1]<=pexp(t1,lambda[1]))|(rand[,2]<=pexp(t1,lambda[2]))|(rand[,3]<=pexp(t1,lambda[3]))|(rand[,4]<=pexp(t1,lambda[4]))
#              |(rand[,5]<=pexp(t1,lambda[5]))|(rand[,6]<=pexp(t1,lambda[6]))|(rand[,7]<=pexp(t1,lambda[7]))|(rand[,8]<=pexp(t1,lambda[8]))
#              |(rand[,9]<=pexp(t1,lambda[9]))|(rand[,10]<=pexp(t1,lambda[10]))|(rand[,11]<=pexp(t1,lambda[11]))|(rand[,12]<=pexp(t1,lambda[12]))),]
w4<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]>u),]
w5<-w4[(w4[,1]<=u)|(w4[,2]<=u)|(w4[,nd]<=u),]
return(dim(w5)[1]/runs)
}
#支付额
pay<-function(time,rand){
t0<-floor(time/0.25)
t1<-rep(Time/0.25,length(time))
t<-pmin(t0,t1)
st<-pmin(time,Time)
prob<-sapply(st,ppdf,rand=rand,simplify = "array")
#未违约部分
f<-function(x) sum(exp(R*c(1:x)*0.25))*ppdf(x*0.25,rand)
undefpay<-sapply(t,f,simplify = "array")
#违约时超出时间利息
accrued<-function(t){
if(t<Time){
dt<-t%%0.25
accrue<-dt*exp(R*t)*apdf(t,rand)
}
else{
accrue<-0
}
return(accrue)
}
accruedpay<-sapply(st,accrued,simplify = "array")
accruedpay<-as.numeric(accruedpay)
EA<-mean(undefpay)+mean(accruedpay)
return(EA)
}
EA<-pay(paydef,simtime)
#CDS-spreads
s[z]<-EB/EA
}
spread<-mean(na.omit(s))
s_vine<-append(s_vine,spread)
#cat(Time,"years CDS:",spread,"\n")
}
s_hac
s_hac*10000
load("E:/大学/My work/毕设/12vine.RData")
for(nd in 3:12){
s<-rep(NA,n)
for(z in 1:n){
sim<-RVineSim(runs,Rcop1$RVM)
#sim<-rHAC(runs,H)
def<-sim
deftime<-matrix(data = NA,nrow = runs,ncol = dim(def)[2])#default time
for(i in 1:dim(def)[2]){
deftime[,i]<--log(1-def[,i])/lambda[i]
}
#sort reference entity default time & choose the stoptime
stoptime<-rep(Inf,dim(deftime)[1])
for(i in 1:dim(deftime)[2]){
deftime[i,3:12]<-sort(deftime[i,3:12])
stoptime[i]<-min(deftime[i,1:2],deftime[i,nd])
}
paydef<-stoptime[stoptime<Time]
#对违约时间排序
simtime<-matrix(data = NA,nrow = runs,ncol = dim(sim)[2])#simulation time
for(i in 1:dim(sim)[2]){
simtime[,i]<--log(1-sim[,i])/lambda[i]
}
for(i in 1:dim(simtime)[1]){
simtime[i,3:12]<-sort(simtime[i,3:12])
}
#dpdf表示违约支付概率
dpdf<-function(u,rand){
#u表示违约时间的均匀分布,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]<u),]
return(dim(w1)[1]/runs)
}
p<-sapply(paydef,dpdf,rand=simtime,simplify = "array")
if(!is.numeric(p)) next
B<-(1-0.4)*p*exp(R*paydef)
EB<-mean(B)
#pay表示保费支付额,ppdf表示保费支付的概率
ppdf<-function(u,rand){
#u表示违约时间,rand表示Copula分布的随机数;
w1<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd])>u,]
return(dim(w1)[1]/runs)
}
#停时位于两个支付日之间的违约利息
apdf<-function(u,rand){
t<-floor(u/0.25)*0.25
t1<-t+0.25
#  w3<-rand[(rand[,1]>pexp(u,lambda[1]))&(rand[,2]>pexp(u,lambda[2]))&(rand[,3]>pexp(u,lambda[3]))&(rand[,4]>pexp(u,lambda[4]))
#            &(rand[,5]>pexp(u,lambda[5]))&(rand[,6]>pexp(u,lambda[6]))&(rand[,7]>pexp(u,lambda[7]))&(rand[,8]>pexp(u,lambda[8]))
#            &(rand[,9]>pexp(u,lambda[9]))&(rand[,10]>pexp(u,lambda[10]))&(rand[,11]>pexp(u,lambda[11]))&(rand[,12]>pexp(u,lambda[12]))
#           &((rand[,1]<=pexp(t1,lambda[1]))|(rand[,2]<=pexp(t1,lambda[2]))|(rand[,3]<=pexp(t1,lambda[3]))|(rand[,4]<=pexp(t1,lambda[4]))
#              |(rand[,5]<=pexp(t1,lambda[5]))|(rand[,6]<=pexp(t1,lambda[6]))|(rand[,7]<=pexp(t1,lambda[7]))|(rand[,8]<=pexp(t1,lambda[8]))
#              |(rand[,9]<=pexp(t1,lambda[9]))|(rand[,10]<=pexp(t1,lambda[10]))|(rand[,11]<=pexp(t1,lambda[11]))|(rand[,12]<=pexp(t1,lambda[12]))),]
w4<-rand[(rand[,1]>u)&(rand[,2]>u)&(rand[,nd]>u),]
w5<-w4[(w4[,1]<=u)|(w4[,2]<=u)|(w4[,nd]<=u),]
return(dim(w5)[1]/runs)
}
#支付额
pay<-function(time,rand){
t0<-floor(time/0.25)
t1<-rep(Time/0.25,length(time))
t<-pmin(t0,t1)
st<-pmin(time,Time)
prob<-sapply(st,ppdf,rand=rand,simplify = "array")
#未违约部分
f<-function(x) sum(exp(R*c(1:x)*0.25))*ppdf(x*0.25,rand)
undefpay<-sapply(t,f,simplify = "array")
#违约时超出时间利息
accrued<-function(t){
if(t<Time){
dt<-t%%0.25
accrue<-dt*exp(R*t)*apdf(t,rand)
}
else{
accrue<-0
}
return(accrue)
}
accruedpay<-sapply(st,accrued,simplify = "array")
accruedpay<-as.numeric(accruedpay)
EA<-mean(undefpay)+mean(accruedpay)
return(EA)
}
EA<-pay(paydef,simtime)
#CDS-spreads
s[z]<-EB/EA
}
spread<-mean(na.omit(s))
s_vine<-append(s_vine,spread)
#cat(Time,"years CDS:",spread,"\n")
}
s_vine
plot(s_vine[11:20]*10000)
ncds<-data.frame(nth to default=1:10,s_hac,s_vine)
ncds<-data.frame(nth-default=1:10,s_hac,s_vine)
ncds<-data.frame(nth_default=1:10,s_hac,s_vine)
qplot(nth_default,s_vine*10000,colour="red",geom="line")
qplot(nth_default,s_vine*10000,data=ncds,colour="red",geom="line")
s_vine<-s_vine[11:20]
ncds<-data.frame(nth_default=1:10,s_hac,s_vine)
head(ncds)
qplot(nth_default,s_vine,data=ncds,colour="red",geom="line",ylab = "CDS spread(bps)")
ncds1<-melt(ncds,id.vars = "nth_default",measure.vars = c("s_hac","s_vine"))
head(ncds1)
qplot(nth_default,value,data=ncds1,colour=variable,geom="line",ylab="CDS spread(bps)",xlab = "nth to default")
qplot(nth_default,value,data=ncds1,colour=variable,geom="line",ylab="CDS spread(bps)",xlab = "nth to default")+geom_point()
qplot(nth_default,value,data=ncds1,colour=variable,lty=variable,geom="line",ylab="CDS spread(bps)",xlab = "nth to default")+geom_point()
qplot(nth_default,value*10000,data=ncds1,colour=variable,lty=variable,geom="line",ylab="CDS spread(bps)",xlab = "nth to default")+geom_point()
qplot(nth_default,s_vine*10000,data=ncds,colour="red",geom="line",ylab="CDS spread(bps)",xlab = "nth to default")+geom_point()
qplot(year,s_vine*10000,data=cds,colour="red",geom="line",ylab="CDS spread(bps)")+geom_point()
qplot(year,value*10000,data=cds1,colour=variable,lty=variable,geom="line",ylab="CDS spread(bps)")+geom_point()
t(bondrate)
lambda*100
lambda
save.image("E:/大学/My work/毕设/nth_default.RData")
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install.packages("C:/Users/Lovely/Downloads/slidify_0.3.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Lovely/Downloads/recharts_0.0.4.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Lovely/Downloads/recharts_0.0.4.tar.gz", repos = NULL, type = "source")
require(devtools)
devtools::install_github('taiyun/recharts')
require(devtools)
devtools::install_github('taiyun/recharts')
library(recharts)
mapData <- data.frame(province=c("上海", "江苏", "广东", "黑龙江"),
val1=c(100, 200, 300, 500), val2=c(200,300,400,200), val3=c(1,2,3,5), stringsAsFactors=F)
## 全国地图
eMap(mapData, namevar=~province, datavar = ~val1+val2)
provinceMapData <- data.frame(city=c("扬州市", "南京市", "苏州市"), value=c(100, 200, 300),
val2=c(200,300,400), val3=c(1,2,3), stringsAsFactors=F)
## 省份地图
eMap(provinceMapData, namevar=~city, datavar = ~value+val2, region="江苏")
getwd()
install.packages(c('repr','IRdisplay','evaluate','crayon','pbdZMQ','uuid','digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
getwd()
getwd()
setwd("C:/User/Lovely/Documents/learnpython/riskmanagement/PPD-First-Round-Data-Update/Training Set")
getwd()
creditdata=read.csv("PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE,encoding = GBK)
creditdata=read.csv("PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE)
head(creditdata)
creditdata=read.csv("PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE,encoding = "GBK")
head(creditdata)
creditdata=read.csv("PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE)
creditdata=read.csv("C:/User/Lovely/Documents/learnpython/riskmanagement/PPD-First-Round-Data-Update/Training Set/PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE)
creditdata=read.csv("C:/Users/Lovely/Documents/learnpython/riskmanagement/PPD-First-Round-Data-Update/Training Set/PPD_Training_Master_GBK_3_1_Training_Set.csv",header = TRUE)
head(creditdata)
library(devtools)
devtools::install_github("rstudio/keras")
install_tensorflow()
library(tensorflow)
install_tensorflow()
install_tensorflow()
library(tensorflow)
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 0.1 + 0.3
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
loss <- tf$reduce_mean((y - y_data) ^ 2)
optimizer <- tf$train$GradientDescentOptimizer(0.5)
train <- optimizer$minimize(loss)
train
sess = tf$Session()
sess$run(tf$global_variables_initializer())
for (step in 1:201) {
sess$run(train)
if (step %% 20 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
source("fully_connected_feed.R", echo = TRUE)
source("fully_connected_feed.R")
datasets <- tf$contrib$learn$datasets
mnist <- datasets$mnist$read_data_sets("MNIST-data", one_hot = TRUE)
class(mnist)
mnist$test
mnist$test$images
library(plyr)
library(dplyr)
mtcars$model <- rownames(mtcars)
first <- mtcars[1:20, ]
second <- mtcars[10:32, ]
intersect(first, second)
a<-colnames(mtcars)
a
rm(mtcars)
data("mtcars")
b<-colnames(mtcars)
b
intersect(a,b)
select(b, intersect(a,b))
c<-intersect(a,b)
class(c)
c[1]
select(b,as.vector(c))
d<-as.vector(c)
d
class(d)
str(c)
unlist(c)
Examples
iris <- tbl_df(iris)
vars <- c("Petal.Length", "Petal.Width")
select(iris, one_of(vars))
select(b,one_of(c))
vars
b
select(mtcars,one_of(c))
select(mtcars,c)
install.packages(c("adaptMCMC", "bindrcpp", "boot", "car", "coin", "copula", "CORElearn", "cubature", "curl", "DBI", "desc", "devtools", "dplyr", "forecast", "foreign", "Formula", "gamlss.dist", "git2r", "glue", "HiddenMarkov", "htmlwidgets", "httpuv", "igraph", "keras", "knitr", "ks", "mboost", "mgcv", "pander", "partitions", "pcaPP", "processx", "pspline", "quantmod", "Rcpp", "reticulate", "rlang", "rmarkdown", "RMySQL", "sandwich", "segmented", "shiny", "sp", "stabs", "sysfonts", "tensorflow", "tseries", "TTR", "VineCopula", "withr", "XML", "xts"))
install.packages("VineCopula")
install.packages("DT")
install.packages("DT")
install.packages("VineCopula")
install.packages("testthat")
install.packages("gbm")
install.packages(c("httr", "Matrix", "plotrix", "RcppArmadillo", "servr", "shape", "VineCopula"))
install.packages("RcppArmadillo")
Rcpp::sourceCpp('fib_cpp_1')
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
system('g++ -v')
system('g++ -v')
system('where make')
Rcpp::sourceCpp('fib_cpp_1.cpp')
library(Rcpp)
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
system.time(fib_cpp_1(30))
system.time(fib_cpp_1(40))
system.time(fib_cpp_1(45))
x<-runif(64000000,8000,8000)
system.time(x%*%x)
system.time(x*x)
x<-runif(6400000000,80000,80000)
library(rJava)
library(rJava)
library(devtools)
getwd()
library(rJava)
n=10000;p=.51
s=seq(1,n,2)
x=NULL
for(i in s)x=c(x,(pbinom(floor(i/2),i,p,lower=F)))
plot(s,x,type="l")
n=10000;p=.49
s=seq(1,n,2)
x1=NULL
for(i in s)x1=c(x1,(pbinom(floor(i/2),i,p,lower=F)))
plot(s,x1,type="l")
par(mfrow=c(1,2));plot(s,x,type="l",xlab = 'n',ylab = 'prob');plot(s,x1,type="l",xlab = 'n',ylab = 'prob')
par(mfrow=c(1,2));plot(s,x,type="l",xlab = 'n',ylab = 'prob',main = '个体概率0.51');plot(s,x1,type="l",xlab = 'n',ylab = 'prob',main = '个体概率0.49')
sessionInfo()
Encoding()
Encoding('sefds')
install.packages("digest")
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
print(tli.table)
library(xtable)
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
print(tli.table)
print(tli.table, type = "html")
xtable(mtcars)
install.packages("htmlTable")
install.packages("microbenchmark")
fib <- function(n){
if(n==1|n==2) return(1)
return(fib(n-1)+fib(n-2))
}
fib(4)
fib(5)
fib(8)
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
system('g++ -v')
system('where make')
system('g++ -v')
library(Rcpp)
compilerCheck(minVersion = package_version("4.6.0"))
evalCpp("2+3")
system('g++ -v')
evalCpp("2+3")
LdFlags()
sourceCpp("fibonacci.cpp")
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
Rcpp::sourceCpp('fib_cpp_1.cpp')
install.packages("Rcpp")
install.packages(c("R6","randomForest","RcppArmadillo","RcppClassic","RcppEigen","RCurl","readr","readxl"))
install.packages(c("plyr","dplyr","reshape2","ggplot2","data.table","haven","devtools"))
install.packages(c("knitr","xtable","bookdown","bolgdown"))
install.packages("VineCopula")
install.packages("TSA")
install.packages("lubridate")
install.packages("rugarch")
install.packages("rmgarch")
install.packages("caret")
install.packages("e1071")
install.packages("RMySQL")
install.packages("keras")
install.packages(c("bigalgebra","biganalytics","biglm","bigmemory","bigmemory.sri","bigml"))
install.packages("rJava")
install.packages("DT")
install.packages("tidyverse")
install.packages("timeSeries")
install.packages("fGarch")
install.packages("mice")
install.packages("microbenchmark")
install.packages("pROC")
install.packages("showtext")
install.packages("xgboost")
library(keras)
install_keras(method = "conda")
Rcpp::sourceCpp('fib_cpp_1.cpp')
Rcpp::sourceCpp('fib_cpp_1.cpp')
system("gcc -v")
sessionInfo()
Sys.which("gcc")
Sys.which("g++")
system('where make')
Rcpp::sourceCpp('fib_cpp_1.cpp')
install.packages(c("keras", "mgcv"))
blogdown::hugo_version()
getwd()
setwd("C:\\Users\\Lovely\\Documents\\GitHub\\mysite")
library(blogdown)
hugo_build()
file.edit("~/.Rprofile")
blogdown:::new_post_addin()
getwd()
blogdown::hugo_build()
blogdown::hugo_build()
